openapi: 3.0.0
info:
  title: An unnamed work
  description: |-
    https://editor.swagger.io/?_ga=2.123513611.1880996912.1659936114-46167596.1659936114
  contact:
    email: do_later@gmail.com
  version: 0.0.1
servers:
  - url: https://recomenda-filmes.herokuapp.com/
tags:
  - name: lists
    description: Create a list 
  - name: recommendations
    description: Operations about recomendations
  - name: users
    description: Operations about user
  - name: login
    description: Access to system

paths:
  /lists/{user_id}:
    get:
        tags:
          - lists
        summary: Search for user's movie list
        description: Consultation List From a User
        parameters:
          - in: path
            name: user_id
            required: true
            schema:
              type: integer
              minimum: 1
            description: The user ID
        responses:
          '200':
            description: Successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Lists'
    delete:
        tags:
          - lists
        summary: Remove a movie from the user's list
        description: Remove for a specific user using user_id
        parameters:
          - in: path
            name: user_id
            required: true
            schema:
              type: integer
              minimum: 1
            description: The user ID
        responses:
          '200':
            description: Successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/UserRemove'
          '404':
            description: User not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error404'
        security:
          - user_auth:
              - remove:users                    
  /list: 
    delete:
      tags:
        - lists
      summary: Remove user's list
      description: Removes all movies from the list and clears the list
      responses: 
        '200':
          description: Sucessful operation
          content:
            applicarion/json:
              schema:
                $ref: '#/components/schemas/RemoveLists'
    post: 
      tags: 
        - lists 
      summary:  Add a new movie to the user list 
      description: lists
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Lists'
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListsResponse'
  /cold_start:
    get:
        tags:
          - recommendations
        summary: Make HTTP request and order the movies
        description: Group the films on the cards
        responses:
          '200':
            description: Successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ColdStart'
  /content_based:
    post: 
      tags: 
        - recommendations 
      summary: Access the movies in the database
      description: Search movies in the back
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContentBased'
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ColdStart'
  /users:
    post:
      tags:
        - users
      summary: Register a new user
      description: Create an account for a new user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successPost'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
    get:
      tags:
        - users
      summary: Search all users
      description: Search all users registered in the system
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Users not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
      security:
        - user_auth:
            - read:users
  /users/{user_id}:
    get:
      tags:
        - users
      summary: Search for a specific user
      description: Search for a specific user using user_id
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
            minimum: 1
          description: The user ID
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Data not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
      security:
        - user_auth:
            - write:users
    put:
      tags:
        - users
      summary: Update an existing user
      description: Update an existing user by Id
      operationId: updatePet
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
            minimum: 1
          description: The user ID
      requestBody:
        description: Update an existent pet in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        '404':
          description: Data not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
      security:
        - user_auth:
            - write:pets
            - read:pets
    delete:
      tags:
        - users
      summary: Remove for a specific user
      description: Remove for a specific user using user_id
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
            minimum: 1
          description: The user ID
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRemove'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
      security:
        - user_auth:
            - remove:users
  /login:
    post:
      tags:
        - login
      summary: Remove for a specific user
      description: Remove for a specific user using user_id
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
        required: true
      responses:
        '200':
          description: Successful operation
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        '401':
          description: Unauthourized operation
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/Error404'
      security:
        - user_auth:
            - read:users
components:
  schemas:
    RemoveLists:
      type: object
      properties:
        message:
          type: string
          example: 'List cleared'
    ListsResponse:
      type: object
      properties:
        message: 
          type: string
          example: 'Movie added to yout list'
    Lists:
      type: object
      properties:
        id_user:
          type: integer
          example: 2
        id_movie:
          type: integer
          example: 22
    ColdStart:
      type: object
      properties:
        movie_info:
          type: string
          example: rec
    ContentBased:
      type: object
      properties:
        movies_name:  
          type: string
          example: 'nome de um filme'
    User:
      type: object
      properties:
        login_user:
          type: string
          example: theUser
        first_name:
          type: string
          example: John
        last_name:
          type: string
          example: James
        email_user:
          type: string
          example: john@email.com
        pw_user:
          type: string
          example: '12345'
        birth_date:
          type: string
          example: '14/06/1989'
    Login:
      type: object
      properties:
        email_user:
          type: string
          example: 'JohnUser'
        pw_user:
          type: string
          example: '12345'
    UserRemove:
      type: object
      properties:
        message:
          type: string
          example: 'User Remove'
    Error400:
      type: object
      properties:
        message:
          type: string
          example: 'Missing Data'
    Error404:
      type: object
      properties:
        message:
          type: string
          example: 'Not Found'
    successPost:
      type: object
      properties:
        message:
          type: string
          example: User created
  requestBodies:
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
    LoginArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Login'
  securitySchemes:
    user_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:users: modify users in your account
            read:users: read your usersp
            remove:users: remove an user
    api_key:
      type: apiKey
      name: api_key
      in: header